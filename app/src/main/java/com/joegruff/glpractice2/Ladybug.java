package com.joegruff.glpractice2;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.opengl.GLES20;
import android.opengl.GLUtils;
import android.opengl.Matrix;
import android.util.Log;

import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;

import static android.content.ContentValues.TAG;

/**
 * Created by joe on 1/1/17.
 */

public class Ladybug {


    private static ShortBuffer mDrawOrderBuffer;
    private static FloatBuffer mPositionBuffer;
    private static FloatBuffer mNormalBuffer;
    private static FloatBuffer mColorBuffer;
    private static FloatBuffer mTextureCoordsBuffer;
    private static FloatBuffer mIndexBuffer;

    private static float[] mTextureCoords;
    private static float[] mVertexes;
    private static short[] mDrawOrder;
    private static float[] mNormals;
    private static float[] mColors;

    private static Context mContext;
    private static int mShellTextureDataHandle;

    private final int LEFT_LEG_OFFSET;
    private final int RIGHT_LEG_OFFSET;
    private final int HEAD_OFFSET;

    private static float[] mIndex;

    private static float[] mShellBoneMatrix;
    private static float[] mLeftLegsBoneMatrix;
    private static float[] mRightLegsBoneMatrix;
    private static float[] mHeadBoneMatrix;
    private static float[] mLeftLegsColors;
    private static float[] mRightLegsColors;
    private static float[] mHeadColors;
    private static float[] mShellTextureCoords;

    public Ladybug(Context context) {


        mLeftLegsBoneMatrix = new float[]{1f, 0, 0, 0.58244f, 0, 1f, 0, -0.01897f, 0, 0, 1f, -0.15794f, 0, 0, 0, 1f};
        mRightLegsBoneMatrix = new float[]{1f, 0, 0, -0.58244f, 0, 1f, 0, -0.01897f, 0, 0, 1f, -0.15794f, 0, 0, 0, 1f};
        mHeadBoneMatrix = new float[]{1f, 0, 0, -0.00042f, 0, 1f, 0, -0.04334f, 0, 0, 1f, -1.25622f, 0, 0, 0, 1f};
        mShellBoneMatrix = new float[]{1f, 0, 0, 0.02688f, 0, 1f, 0, 0.14431f, 0, 0, 1f, -0.14968f, 0, 0, 0, 1f};

        mShellTextureCoords = new float[]{0.3721f, 0.7128f,
0.0001f, 0.7137f,
0.0532f, 0.8971f,
0.1933f, 0.9999f,
0.3644f, 0.9999f,
0.5350f, 0.9133f,
0.5813f, 0.7067f,
0.0505f, 0.5266f,
0.1883f, 0.4219f,
0.3588f, 0.4189f,
0.5306f, 0.5018f,
0.1502f, 0.838f,
0.2523f, 0.8892f,
0.3595f, 0.8878f,
0.4422f, 0.8305f,
0.4751f, 0.7078f,
0.1076f, 0.7112f,
0.1475f, 0.5837f,
0.2488f, 0.5306f,
0.3562f, 0.5307f,
0.4398f, 0.5863f,
0.3612f, 0.7717f,
0.3145f, 0.7844f,
0.2533f, 0.7797f,
0.3602f, 0.6467f,
0.3133f, 0.6348f,
0.3109f, 0.7132f,
0.2428f, 0.7145f,
0.2520f, 0.6406f,
0.0908f, 0.032f,
0.0320f, 0.0908f,
0.0001f, 0.1678f,
0.0001f, 0.251f,
0.0320f, 0.328f,
0.0908f, 0.3869f,
0.1678f, 0.4187f,
0.2510f, 0.4187f,
0.3280f, 0.3869f,
0.3869f, 0.328f,
0.4187f, 0.251f,
0.4187f, 0.1678f,
0.3869f, 0.0908f,
0.3280f, 0.032f,
0.2510f, 0.0001f,
0.1678f, 0.0001f};
        mVertexes = new float[]{-0.295718f, 0.192634f, -0.449923f,
0.113502f, -0.156039f, -0.672985f,
0.09738f, -0.18732f, -0.670665f,
-0.31184f, 0.161353f, -0.447603f,
0.081038f, -0.193457f, -0.701309f,
-0.328181f, 0.155216f, -0.478247f,
0.087061f, -0.165969f, -0.722568f,
-0.322158f, 0.182704f, -0.499506f,
0.107124f, -0.142844f, -0.705063f,
-0.302095f, 0.205829f, -0.482001f,
-0.061373f, 0.040099f, -0.610012f,
-0.05262f, 0.019605f, -0.557445f,
-0.035605f, 0.050397f, -0.560143f,
-0.068545f, 0.013241f, -0.588266f,
-0.041014f, 0.063063f, -0.592631f,
-0.122072f, 0.152567f, 0.109393f,
0.35788f, -0.158458f, 0.001229f,
0.349155f, -0.189259f, 0.016026f,
-0.130797f, 0.121766f, 0.124189f,
0.33502f, -0.209738f, -0.008966f,
-0.144933f, 0.101287f, 0.099198f,
0.335009f, -0.191594f, -0.039207f,
-0.144944f, 0.119431f, 0.068956f,
0.349137f, -0.159901f, -0.032907f,
-0.130815f, 0.151124f, 0.075257f,
0.142642f, 0.004907f, 0.00014f,
0.155061f, 0.007929f, 0.055786f,
0.164772f, 0.038338f, 0.040754f,
0.141384f, -0.012733f, 0.030685f,
0.157096f, 0.03647f, 0.006363f,
-0.260238f, 0.171585f, 0.451632f,
0.182699f, -0.143031f, 0.660469f,
0.166019f, -0.16248f, 0.684703f,
-0.276918f, 0.152136f, 0.475866f,
0.156636f, -0.192959f, 0.669644f,
-0.286301f, 0.121657f, 0.460807f,
0.167517f, -0.192347f, 0.636103f,
-0.27542f, 0.122269f, 0.427266f,
0.183625f, -0.16149f, 0.630433f,
-0.259313f, 0.153126f, 0.421596f,
0.001103f, -0.006023f, 0.514632f,
-0.002056f, 0.024614f, 0.562707f,
0.015571f, 0.043624f, 0.538772f,
-0.010997f, -0.006069f, 0.547788f,
0.017524f, 0.024689f, 0.50906f,
0.295718f, 0.192635f, -0.449923f,
-0.113502f, -0.156038f, -0.672985f,
-0.09738f, -0.187318f, -0.670665f,
0.31184f, 0.161354f, -0.447603f,
-0.081038f, -0.193456f, -0.70131f,
0.328181f, 0.155217f, -0.478247f,
-0.087061f, -0.165968f, -0.722569f,
0.322158f, 0.182705f, -0.499506f,
-0.107124f, -0.142843f, -0.705063f,
0.302095f, 0.20583f, -0.482001f,
0.061373f, 0.0401f, -0.610012f,
0.05262f, 0.019606f, -0.557445f,
0.035605f, 0.050398f, -0.560144f,
0.068545f, 0.013242f, -0.588266f,
0.041014f, 0.063064f, -0.592632f,
0.122072f, 0.152569f, 0.109392f,
-0.35788f, -0.158457f, 0.001229f,
-0.349155f, -0.189258f, 0.016025f,
0.130797f, 0.121767f, 0.124189f,
-0.33502f, -0.209737f, -0.008966f,
0.144933f, 0.101288f, 0.099198f,
-0.335009f, -0.191593f, -0.039208f,
0.144944f, 0.119432f, 0.068956f,
-0.349137f, -0.1599f, -0.032907f,
0.130815f, 0.151125f, 0.075257f,
-0.142642f, 0.004908f, 0.00014f,
-0.155061f, 0.00793f, 0.055786f,
-0.164772f, 0.038339f, 0.040754f,
-0.141384f, -0.012731f, 0.030685f,
-0.157096f, 0.036471f, 0.006363f,
0.260238f, 0.171586f, 0.451632f,
-0.182699f, -0.14303f, 0.660469f,
-0.166019f, -0.162479f, 0.684703f,
0.276918f, 0.152137f, 0.475866f,
-0.156636f, -0.192958f, 0.669644f,
0.286301f, 0.121658f, 0.460807f,
-0.167517f, -0.192346f, 0.636103f,
0.27542f, 0.12227f, 0.427266f,
-0.183625f, -0.161489f, 0.630432f,
0.259313f, 0.153127f, 0.421595f,
-0.001103f, -0.006022f, 0.514632f,
0.002056f, 0.024615f, 0.562707f,
-0.015571f, 0.043625f, 0.538772f,
0.010997f, -0.006068f, 0.547788f,
-0.017524f, 0.02469f, 0.50906f,
4.1e-05f, 0.240108f, 0.01186f,
-0.023374f, -0.207828f, -0.105858f,
-0.040515f, -0.119964f, -0.192033f,
-0.031084f, 6e-05f, -0.226923f,
-0.040515f, 0.120084f, -0.192033f,
-0.023374f, 0.207948f, -0.105858f,
4.1e-05f, -0.239988f, 0.01186f,
-0.04589f, -0.207828f, -0.099027f,
-0.079514f, -0.119964f, -0.180203f,
-0.110385f, 6e-05f, -0.202087f,
-0.079514f, 0.120084f, -0.180203f,
-0.04589f, 0.207948f, -0.099028f,
-0.06664f, -0.207828f, -0.087936f,
-0.115455f, -0.119964f, -0.160992f,
-0.133322f, 6e-05f, -0.187733f,
-0.115455f, 0.120084f, -0.160992f,
-0.06664f, 0.207948f, -0.087936f,
-0.084828f, -0.207828f, -0.07301f,
-0.146957f, -0.119964f, -0.135139f,
-0.169698f, 6e-05f, -0.15788f,
-0.146957f, 0.120084f, -0.135139f,
-0.084828f, 0.207948f, -0.07301f,
-0.099755f, -0.207828f, -0.054822f,
-0.172811f, -0.119964f, -0.103636f,
-0.199551f, 6e-05f, -0.121503f,
-0.172811f, 0.120084f, -0.103636f,
-0.099755f, 0.207948f, -0.054822f,
-0.110846f, -0.207828f, -0.034071f,
-0.192022f, -0.119964f, -0.067695f,
-0.221734f, 6e-05f, -0.080002f,
-0.192022f, 0.120084f, -0.067695f,
-0.110846f, 0.207948f, -0.034071f,
-0.117676f, -0.207828f, -0.011555f,
-0.203852f, -0.119964f, -0.028697f,
-0.235394f, 6e-05f, -0.034971f,
-0.203852f, 0.120084f, -0.028697f,
-0.117676f, 0.207948f, -0.011555f,
-0.119983f, -0.207828f, 0.01186f,
-0.207846f, -0.119964f, 0.01186f,
-0.240007f, 6e-05f, 0.01186f,
-0.207846f, 0.120084f, 0.01186f,
-0.119983f, 0.207948f, 0.01186f,
-0.117676f, -0.207828f, 0.035276f,
-0.203852f, -0.119964f, 0.052417f,
-0.235394f, 6e-05f, 0.058691f,
-0.203852f, 0.120084f, 0.052417f,
-0.117676f, 0.207948f, 0.035276f,
-0.110846f, -0.207828f, 0.057791f,
-0.192022f, -0.119964f, 0.091416f,
-0.221734f, 6e-05f, 0.103723f,
-0.192022f, 0.120084f, 0.091416f,
-0.110846f, 0.207948f, 0.057791f,
-0.099755f, -0.207828f, 0.078542f,
-0.172811f, -0.119964f, 0.127357f,
-0.199551f, 6e-05f, 0.145224f,
-0.172811f, 0.120084f, 0.127356f,
-0.099755f, 0.207948f, 0.078542f,
-0.084828f, -0.207828f, 0.09673f,
-0.146957f, -0.119964f, 0.158859f,
-0.169698f, 6e-05f, 0.1816f,
-0.146957f, 0.120084f, 0.158859f,
-0.084828f, 0.207948f, 0.09673f,
-0.06664f, -0.207828f, 0.111657f,
-0.115455f, -0.119964f, 0.184713f,
-0.133322f, 6e-05f, 0.211453f,
-0.115455f, 0.120084f, 0.184713f,
-0.06664f, 0.207948f, 0.111657f,
-0.04589f, -0.207828f, 0.122748f,
-0.079514f, -0.119964f, 0.203924f,
-0.091821f, 6e-05f, 0.233636f,
-0.079514f, 0.120084f, 0.203924f,
-0.04589f, 0.207948f, 0.122748f,
-0.023374f, -0.207828f, 0.129578f,
-0.040515f, -0.119964f, 0.215753f,
-0.04679f, 6e-05f, 0.247296f,
-0.040515f, 0.120084f, 0.215753f,
-0.023374f, 0.207948f, 0.129578f,
4.1e-05f, -0.207828f, 0.131884f,
4.2e-05f, -0.119964f, 0.219748f,
4.2e-05f, 6e-05f, 0.251908f,
4.1e-05f, 0.120084f, 0.219748f,
4.1e-05f, 0.207948f, 0.131884f,
0.023457f, -0.207828f, 0.129578f,
0.040598f, -0.119964f, 0.215753f,
0.046873f, 6e-05f, 0.247296f,
0.040598f, 0.120084f, 0.215753f,
0.023457f, 0.207948f, 0.129578f,
0.045973f, -0.207828f, 0.122748f,
0.079597f, -0.119964f, 0.203924f,
0.091904f, 6e-05f, 0.233636f,
0.079597f, 0.120084f, 0.203924f,
0.045973f, 0.207948f, 0.122748f,
0.066723f, -0.207828f, 0.111657f,
0.115538f, -0.119964f, 0.184713f,
0.133405f, 6e-05f, 0.211453f,
0.115538f, 0.120084f, 0.184713f,
0.066723f, 0.207948f, 0.111657f,
0.084911f, -0.207828f, 0.09673f,
0.14704f, -0.119964f, 0.158859f,
0.169781f, 6e-05f, 0.1816f,
0.14704f, 0.120084f, 0.158859f,
0.084911f, 0.207948f, 0.09673f,
0.099838f, -0.207828f, 0.078542f,
0.172894f, -0.119964f, 0.127356f,
0.199634f, 6e-05f, 0.145224f,
0.172894f, 0.120084f, 0.127356f,
0.099838f, 0.207948f, 0.078542f,
0.110929f, -0.207828f, 0.057791f,
0.192105f, -0.119964f, 0.091415f,
0.221817f, 6e-05f, 0.103722f,
0.192105f, 0.120084f, 0.091415f,
0.110929f, 0.207948f, 0.057791f,
0.117759f, -0.207828f, 0.035276f,
0.203935f, -0.119964f, 0.052417f,
0.235477f, 6e-05f, 0.058691f,
0.203935f, 0.120084f, 0.052417f,
0.117759f, 0.207948f, 0.035276f,
0.120065f, -0.207828f, 0.01186f,
0.207929f, -0.119964f, 0.01186f,
0.24009f, 6e-05f, 0.01186f,
0.207929f, 0.120084f, 0.01186f,
0.120066f, 0.207948f, 0.01186f,
0.117759f, -0.207828f, -0.011555f,
0.203935f, -0.119964f, -0.028697f,
0.235477f, 6e-05f, -0.034971f,
0.203935f, 0.120084f, -0.028697f,
0.117759f, 0.207948f, -0.011555f,
0.110929f, -0.207828f, -0.034071f,
0.192105f, -0.119964f, -0.067695f,
0.221817f, 6e-05f, -0.080002f,
0.192105f, 0.120084f, -0.067695f,
0.110929f, 0.207948f, -0.034071f,
0.099838f, -0.207828f, -0.054822f,
0.172894f, -0.119964f, -0.103636f,
0.199634f, 6e-05f, -0.121503f,
0.172894f, 0.120084f, -0.103636f,
0.099838f, 0.207948f, -0.054822f,
0.084911f, -0.207828f, -0.07301f,
0.14704f, -0.119964f, -0.135139f,
0.169781f, 6e-05f, -0.157879f,
0.14704f, 0.120084f, -0.135139f,
0.084911f, 0.207948f, -0.07301f,
0.066723f, -0.207828f, -0.087936f,
0.115538f, -0.119964f, -0.160992f,
0.133405f, 6e-05f, -0.187733f,
0.115538f, 0.120084f, -0.160992f,
0.066723f, 0.207948f, -0.087936f,
0.045973f, -0.207828f, -0.099027f,
0.078704f, -0.120016f, -0.179488f,
0.079597f, 0.120084f, -0.180203f,
0.045973f, 0.207948f, -0.099027f,
0.023457f, -0.207828f, -0.105857f,
0.040598f, -0.119964f, -0.192033f,
0.040598f, 0.120084f, -0.192033f,
0.023457f, 0.207948f, -0.105857f,
4.1e-05f, -0.207828f, -0.108164f,
4.1e-05f, -0.119964f, -0.196028f,
4.1e-05f, 6e-05f, -0.228188f,
4.1e-05f, 0.120084f, -0.196028f,
4.1e-05f, 0.207948f, -0.108164f,
-0.096092f, 0.055641f, -0.191953f,
-0.03532f, 0.05397f, -0.211252f,
-0.094952f, -0.059952f, -0.191145f,
-0.0358f, -0.059952f, -0.209478f,
-0.056789f, 0.005634f, -0.164132f,
0.030275f, 8e-06f, -0.226208f,
0.109576f, 8e-06f, -0.201371f,
0.095282f, 0.05559f, -0.191237f,
0.034511f, 0.053918f, -0.210537f,
0.094142f, -0.060004f, -0.190429f,
0.03499f, -0.060004f, -0.208763f,
0.05598f, 0.005582f, -0.163417f,
0.063949f, 0.025526f, -0.17443f,
0.063949f, 0.014506f, -0.16341f,
0.063949f, -0.000547f, -0.159377f,
0.063949f, -0.015601f, -0.16341f,
0.063949f, -0.026621f, -0.17443f,
0.063949f, -0.030654f, -0.189484f,
0.063949f, 0.02956f, -0.189484f,
0.076986f, 0.025526f, -0.181957f,
0.086529f, 0.014506f, -0.176447f,
0.090022f, -0.000547f, -0.17443f,
0.086529f, -0.015601f, -0.176447f,
0.076986f, -0.026621f, -0.181957f,
0.076986f, 0.025526f, -0.197011f,
0.086529f, 0.014506f, -0.20252f,
0.090022f, -0.000547f, -0.204537f,
0.086529f, -0.015601f, -0.20252f,
0.076986f, -0.026621f, -0.197011f,
0.063949f, 0.025526f, -0.204537f,
0.063949f, 0.014506f, -0.215557f,
0.063949f, -0.000547f, -0.219591f,
0.063949f, -0.015601f, -0.215557f,
0.063949f, -0.026621f, -0.204537f,
0.050912f, 0.025526f, -0.197011f,
0.041369f, 0.014506f, -0.20252f,
0.037876f, -0.000547f, -0.204537f,
0.041369f, -0.015601f, -0.20252f,
0.050912f, -0.026621f, -0.197011f,
0.050912f, 0.025526f, -0.181957f,
0.041369f, 0.014506f, -0.176447f,
0.037876f, -0.000547f, -0.17443f,
0.041369f, -0.015601f, -0.176447f,
0.050912f, -0.026621f, -0.181957f,
-0.061855f, 0.027084f, -0.175458f,
-0.061855f, 0.016064f, -0.164438f,
-0.061855f, 0.001011f, -0.160404f,
-0.061855f, -0.014042f, -0.164438f,
-0.061855f, -0.025062f, -0.175458f,
-0.061855f, -0.029096f, -0.190511f,
-0.061855f, 0.031118f, -0.190511f,
-0.048818f, 0.027084f, -0.182984f,
-0.039275f, 0.016064f, -0.177474f,
-0.035782f, 0.001011f, -0.175458f,
-0.039275f, -0.014042f, -0.177474f,
-0.048818f, -0.025062f, -0.182984f,
-0.048818f, 0.027084f, -0.198038f,
-0.039275f, 0.016064f, -0.203548f,
-0.035782f, 0.001011f, -0.205564f,
-0.039275f, -0.014042f, -0.203548f,
-0.048818f, -0.025062f, -0.198038f,
-0.061855f, 0.027084f, -0.205564f,
-0.061855f, 0.016064f, -0.216584f,
-0.061855f, 0.001011f, -0.220618f,
-0.061855f, -0.014042f, -0.216584f,
-0.061855f, -0.025062f, -0.205564f,
-0.074892f, 0.027084f, -0.198038f,
-0.084435f, 0.016064f, -0.203548f,
-0.087928f, 0.001011f, -0.205564f,
-0.084435f, -0.014042f, -0.203548f,
-0.074892f, -0.025062f, -0.198038f,
-0.074892f, 0.027084f, -0.182984f,
-0.084435f, 0.016064f, -0.177474f,
-0.087928f, 0.001011f, -0.175458f,
-0.084435f, -0.014042f, -0.177474f,
-0.074892f, -0.025062f, -0.182984f,
0.019788f, -0.079892f, -0.20675f,
-0.019339f, -0.080395f, -0.205937f,
-0.042931f, -0.075731f, -0.206114f,
-0.058506f, -0.071983f, -0.206436f,
-0.051548f, -0.092997f, -0.200335f,
-0.024706f, -0.109127f, -0.1968f,
-0.00709f, -0.114778f, -0.196f,
0.043225f, -0.074623f, -0.207904f,
0.000206f, -0.079943f, -0.20712f,
0.058672f, -0.070476f, -0.208872f,
0.052515f, -0.09166f, -0.202498f,
0.026266f, -0.108472f, -0.19786f,
0.00885f, -0.114574f, -0.196331f,
-0.039685f, -0.088887f, -0.203133f,
-0.020745f, -0.095793f, -0.201359f,
-0.001251f, -0.098868f, -0.202192f,
0.019927f, -0.097025f, -0.202647f,
0.040848f, -0.089952f, -0.204523f,
-0.038673f, -0.084857f, -0.209214f,
-0.014743f, -0.090682f, -0.210393f,
0.005235f, -0.09143f, -0.212309f,
0.023875f, -0.089329f, -0.21473f,
0.041834f, -0.085012f, -0.217581f,
-0.03772f, -0.094939f, -0.20626f,
-0.016922f, -0.104287f, -0.205906f,
0.005555f, -0.106653f, -0.208029f,
0.022489f, -0.102576f, -0.211445f,
0.035277f, -0.096934f, -0.214818f,
-0.047675f, 0.141042f, -0.145718f,
-0.099642f, 0.321317f, -0.249537f,
-0.043766f, 0.141042f, -0.147601f,
-0.095644f, 0.32183f, -0.251143f,
-0.0428f, 0.141042f, -0.151831f,
-0.093077f, 0.31887f, -0.253006f,
-0.045505f, 0.141042f, -0.155223f,
-0.093873f, 0.314665f, -0.253723f,
-0.049844f, 0.141042f, -0.155223f,
-0.097434f, 0.312383f, -0.252755f,
-0.052549f, 0.141042f, -0.151831f,
-0.101077f, 0.313742f, -0.25083f,
-0.051584f, 0.141042f, -0.147601f,
-0.10206f, 0.317718f, -0.249398f,
-0.047675f, 0.275128f, -0.145718f,
-0.043766f, 0.274687f, -0.147601f,
-0.0428f, 0.274416f, -0.151831f,
-0.045505f, 0.274519f, -0.155223f,
-0.049844f, 0.274919f, -0.155223f,
-0.052549f, 0.275314f, -0.151831f,
-0.051584f, 0.275407f, -0.147601f,
-0.049114f, 0.28606f, -0.148679f,
-0.044991f, 0.285788f, -0.150058f,
-0.043517f, 0.284838f, -0.154032f,
-0.045801f, 0.283924f, -0.157608f,
-0.050124f, 0.283735f, -0.158093f,
-0.05323f, 0.284413f, -0.155123f,
-0.05278f, 0.285448f, -0.150933f,
-0.05102f, 0.294535f, -0.156428f,
-0.046801f, 0.296341f, -0.155966f,
-0.044307f, 0.294685f, -0.159133f,
-0.046485f, 0.291463f, -0.163116f,
-0.050532f, 0.290526f, -0.164437f,
-0.054333f, 0.291437f, -0.162485f,
-0.055026f, 0.29351f, -0.158731f,
0.048012f, 0.284059f, -0.149791f,
-0.098884f, 0.334938f, -0.252984f,
0.049486f, 0.28501f, -0.145818f,
-0.098884f, 0.312577f, -0.245718f,
-0.098884f, 0.302577f, -0.252984f,
-0.098884f, 0.298758f, -0.264739f,
0.053609f, 0.285281f, -0.144438f,
-0.091974f, 0.334938f, -0.255229f,
-0.087703f, 0.324938f, -0.249351f,
-0.087703f, 0.312577f, -0.249351f,
-0.091974f, 0.302577f, -0.255229f,
0.056079f, 0.274629f, -0.14336f,
0.057044f, 0.274536f, -0.14759f,
-0.087703f, 0.334938f, -0.261107f,
-0.080794f, 0.324938f, -0.258862f,
-0.080794f, 0.312577f, -0.258862f,
-0.087703f, 0.302577f, -0.261107f,
0.054339f, 0.27414f, -0.150982f,
0.05f, 0.273741f, -0.150982f,
-0.087703f, 0.334938f, -0.268372f,
-0.080794f, 0.324938f, -0.270617f,
-0.080794f, 0.312577f, -0.270617f,
-0.087703f, 0.302577f, -0.268372f,
0.047295f, 0.273637f, -0.14759f,
0.04826f, 0.273908f, -0.14336f,
-0.091974f, 0.334938f, -0.27425f,
-0.087703f, 0.324938f, -0.280128f,
-0.087703f, 0.312577f, -0.280128f,
-0.091974f, 0.302577f, -0.27425f,
0.05217f, 0.274349f, -0.141478f,
-0.098884f, 0.338758f, -0.264739f,
-0.098884f, 0.334938f, -0.276495f,
-0.098884f, 0.324938f, -0.283761f,
-0.098884f, 0.312577f, -0.283761f,
-0.098884f, 0.302577f, -0.276495f,
0.106555f, 0.316939f, -0.245157f,
0.056079f, 0.140264f, -0.14336f,
-0.105794f, 0.334938f, -0.27425f,
-0.110064f, 0.324938f, -0.280128f,
-0.110064f, 0.312577f, -0.280128f,
-0.105794f, 0.302577f, -0.27425f,
0.105572f, 0.312963f, -0.246589f,
0.057044f, 0.140264f, -0.14759f,
-0.110064f, 0.334938f, -0.268372f,
-0.116974f, 0.324938f, -0.270617f,
-0.116974f, 0.312577f, -0.270617f,
-0.110064f, 0.302577f, -0.268372f,
0.101929f, 0.311605f, -0.248514f,
0.054339f, 0.140264f, -0.150982f,
-0.110064f, 0.334938f, -0.261107f,
-0.116974f, 0.324938f, -0.258862f,
-0.116974f, 0.312577f, -0.258862f,
-0.110064f, 0.302577f, -0.261107f,
0.098368f, 0.313887f, -0.249483f,
0.05f, 0.140264f, -0.150982f,
-0.105794f, 0.334938f, -0.255229f,
-0.110064f, 0.324938f, -0.249351f,
-0.110064f, 0.312577f, -0.249351f,
-0.105794f, 0.302577f, -0.255229f,
0.097572f, 0.318091f, -0.248765f,
0.047295f, 0.140264f, -0.14759f,
0.100139f, 0.321052f, -0.246902f,
-0.098884f, 0.324938f, -0.245718f,
0.04826f, 0.140264f, -0.14336f,
0.104137f, 0.320539f, -0.245296f,
0.05217f, 0.140264f, -0.141478f,
0.050296f, 0.283145f, -0.153367f,
0.054619f, 0.282956f, -0.153853f,
0.057725f, 0.283635f, -0.150882f,
0.057275f, 0.284669f, -0.146692f,
0.055515f, 0.293756f, -0.152187f,
0.051296f, 0.295563f, -0.151725f,
0.048802f, 0.293907f, -0.154892f,
0.05098f, 0.290685f, -0.158875f,
0.055027f, 0.289748f, -0.160196f,
0.058828f, 0.290659f, -0.158244f,
0.059521f, 0.292731f, -0.15449f,
0.103379f, 0.33416f, -0.248743f,
0.103379f, 0.311799f, -0.241477f,
0.103379f, 0.301799f, -0.248743f,
0.103379f, 0.297979f, -0.260499f,
0.096469f, 0.33416f, -0.250988f,
0.092198f, 0.32416f, -0.24511f,
0.092198f, 0.311799f, -0.24511f,
0.096469f, 0.301799f, -0.250988f,
0.092198f, 0.33416f, -0.256866f,
0.085289f, 0.32416f, -0.254621f,
0.085289f, 0.311799f, -0.254621f,
0.092198f, 0.301799f, -0.256866f,
0.092198f, 0.33416f, -0.264131f,
0.085289f, 0.32416f, -0.266376f,
0.085289f, 0.311799f, -0.266376f,
0.092198f, 0.301799f, -0.264131f,
0.096469f, 0.33416f, -0.270009f,
0.092198f, 0.32416f, -0.275887f,
0.092198f, 0.311799f, -0.275887f,
0.096469f, 0.301799f, -0.270009f,
0.103379f, 0.337979f, -0.260499f,
0.103379f, 0.33416f, -0.272254f,
0.103379f, 0.32416f, -0.27952f,
0.103379f, 0.311799f, -0.27952f,
0.103379f, 0.301799f, -0.272254f,
0.110289f, 0.33416f, -0.270009f,
0.114559f, 0.32416f, -0.275887f,
0.114559f, 0.311799f, -0.275887f,
0.110289f, 0.301799f, -0.270009f,
0.114559f, 0.33416f, -0.264131f,
0.121469f, 0.32416f, -0.266376f,
0.121469f, 0.311799f, -0.266376f,
0.114559f, 0.301799f, -0.264131f,
0.114559f, 0.33416f, -0.256866f,
0.121469f, 0.32416f, -0.254621f,
0.121469f, 0.311799f, -0.254621f,
0.114559f, 0.301799f, -0.256866f,
0.110289f, 0.33416f, -0.250988f,
0.114559f, 0.32416f, -0.24511f,
0.114559f, 0.311799f, -0.24511f,
0.110289f, 0.301799f, -0.250988f,
0.103379f, 0.32416f, -0.241477f,
-0.032305f, 0.216612f, 0.30358f,
-0.021205f, -0.185722f, -0.949743f,
-0.601878f, -0.207424f, -0.758192f,
-0.907246f, -0.196492f, -0.313568f,
-0.895374f, -0.184001f, 0.214447f,
-0.657335f, -0.171378f, 0.760468f,
-0.015449f, -0.169686f, 0.893983f,
0.570981f, -0.207424f, -0.758192f,
0.876349f, -0.196492f, -0.313568f,
0.864477f, -0.184001f, 0.214447f,
0.626438f, -0.171378f, 0.760468f,
-0.472269f, 0.081567f, -0.545742f,
-0.638111f, 0.081567f, -0.162797f,
-0.638111f, 0.081567f, 0.226179f,
-0.442116f, 0.081567f, 0.524696f,
-0.015449f, 0.081567f, 0.660385f,
-0.015449f, 0.077124f, -0.696508f,
0.441372f, 0.077124f, -0.545742f,
0.607214f, 0.077124f, -0.162797f,
0.607214f, 0.081567f, 0.226179f,
0.411219f, 0.081567f, 0.524696f,
-0.25015f, 0.333649f, 0.279373f,
-0.301946f, 0.333649f, 0.078663f,
-0.282522f, 0.333649f, -0.183554f,
0.219253f, 0.333649f, 0.279373f,
0.271049f, 0.333649f, 0.078663f,
-0.032305f, 0.216612f, 0.064806f,
-0.03505f, 0.216612f, -0.206902f,
0.251625f, 0.329206f, -0.183554f,
-0.021985f, -0.124428f, 0.768163f,
-0.315068f, -0.124428f, 0.709866f,
-0.563532f, -0.124428f, 0.543847f,
-0.72955f, -0.124428f, 0.295383f,
-0.787848f, -0.124428f, 0.0023f,
-0.72955f, -0.124428f, -0.290783f,
-0.563532f, -0.124428f, -0.539247f,
-0.315068f, -0.124428f, -0.705265f,
-0.021985f, -0.124428f, -0.763563f,
0.271098f, -0.124428f, -0.705265f,
0.519562f, -0.124428f, -0.539247f,
0.68558f, -0.124428f, -0.290783f,
0.743878f, -0.124428f, 0.0023f,
0.68558f, -0.124428f, 0.295384f,
0.519562f, -0.124428f, 0.543848f,
0.271098f, -0.124428f, 0.709866f};
        mDrawOrder = new short[]{5, 9, 0,
13, 7, 5,
12, 9, 14,
11, 5, 3,
11, 0, 12,
8, 4, 1,
10, 9, 7,
1, 14, 8,
2, 13, 11,
1, 11, 12,
6, 13, 4,
8, 10, 6,
20, 24, 15,
28, 22, 20,
27, 24, 29,
26, 20, 18,
26, 15, 27,
23, 19, 16,
25, 24, 22,
16, 29, 23,
17, 28, 26,
16, 26, 27,
21, 28, 19,
23, 25, 21,
35, 39, 30,
43, 37, 35,
42, 39, 44,
41, 35, 33,
41, 30, 42,
38, 34, 31,
40, 39, 37,
31, 44, 38,
32, 43, 41,
31, 41, 42,
36, 43, 34,
38, 40, 36,
0, 3, 5,
5, 7, 9,
13, 10, 7,
12, 0, 9,
11, 13, 5,
11, 3, 0,
2, 1, 4,
8, 6, 4,
10, 14, 9,
1, 12, 14,
2, 4, 13,
1, 2, 11,
6, 10, 13,
8, 14, 10,
15, 18, 20,
20, 22, 24,
28, 25, 22,
27, 15, 24,
26, 28, 20,
26, 18, 15,
17, 16, 19,
23, 21, 19,
25, 29, 24,
16, 27, 29,
17, 19, 28,
16, 17, 26,
21, 25, 28,
23, 29, 25,
30, 33, 35,
35, 37, 39,
43, 40, 37,
42, 30, 39,
41, 43, 35,
41, 33, 30,
32, 31, 34,
38, 36, 34,
40, 44, 39,
31, 42, 44,
32, 34, 43,
31, 32, 41,
36, 40, 43,
38, 44, 40,
45, 52, 50,
58, 52, 55,
54, 57, 59,
56, 50, 58,
45, 56, 57,
49, 51, 53,
55, 54, 59,
59, 46, 53,
47, 58, 49,
46, 56, 47,
58, 51, 49,
55, 53, 51,
69, 67, 65,
73, 67, 70,
69, 72, 74,
71, 65, 73,
60, 71, 72,
64, 66, 68,
70, 69, 74,
74, 61, 68,
62, 73, 64,
61, 71, 62,
73, 66, 64,
70, 68, 66,
84, 82, 80,
88, 82, 85,
84, 87, 89,
86, 80, 88,
75, 86, 87,
79, 81, 83,
85, 84, 89,
89, 76, 83,
77, 88, 79,
76, 86, 77,
88, 81, 79,
85, 83, 81,
50, 48, 45,
45, 54, 52,
58, 50, 52,
54, 45, 57,
56, 48, 50,
45, 48, 56,
53, 46, 47,
47, 49, 53,
55, 52, 54,
59, 57, 46,
47, 56, 58,
46, 57, 56,
58, 55, 51,
55, 59, 53,
65, 63, 60,
60, 69, 65,
73, 65, 67,
69, 60, 72,
71, 63, 65,
60, 63, 71,
68, 61, 62,
62, 64, 68,
70, 67, 69,
74, 72, 61,
62, 71, 73,
61, 72, 71,
73, 70, 66,
70, 74, 68,
80, 78, 75,
75, 84, 80,
88, 80, 82,
84, 75, 87,
86, 78, 80,
75, 78, 86,
83, 76, 77,
77, 79, 83,
85, 82, 84,
89, 87, 76,
77, 86, 88,
76, 87, 86,
88, 85, 81,
85, 89, 83,
248, 95, 249,
246, 253, 247,
245, 96, 91,
90, 249, 95,
247, 251, 248,
245, 92, 246,
251, 100, 94,
91, 96, 97,
90, 95, 101,
98, 253, 92,
91, 98, 92,
94, 101, 95,
97, 96, 102,
90, 101, 106,
250, 104, 105,
98, 102, 103,
101, 105, 106,
252, 103, 104,
90, 106, 111,
104, 110, 105,
102, 108, 103,
106, 110, 111,
104, 108, 109,
102, 96, 107,
90, 111, 116,
109, 115, 110,
107, 113, 108,
111, 115, 116,
109, 113, 114,
107, 96, 112,
90, 116, 121,
115, 119, 120,
112, 118, 113,
115, 121, 116,
113, 119, 114,
112, 96, 117,
120, 124, 125,
118, 122, 123,
120, 126, 121,
118, 124, 119,
117, 96, 122,
90, 121, 126,
122, 128, 123,
125, 131, 126,
123, 129, 124,
122, 96, 127,
90, 126, 131,
125, 129, 130,
131, 135, 136,
129, 133, 134,
127, 96, 132,
90, 131, 136,
129, 135, 130,
127, 133, 128,
136, 140, 141,
133, 139, 134,
132, 96, 137,
90, 136, 141,
134, 140, 135,
132, 138, 133,
141, 145, 146,
138, 144, 139,
137, 96, 142,
90, 141, 146,
139, 145, 140,
138, 142, 143,
145, 151, 146,
143, 149, 144,
142, 96, 147,
90, 146, 151,
144, 150, 145,
143, 147, 148,
148, 154, 149,
147, 96, 152,
90, 151, 156,
150, 154, 155,
148, 152, 153,
150, 156, 151,
152, 96, 157,
90, 156, 161,
154, 160, 155,
153, 157, 158,
155, 161, 156,
154, 158, 159,
90, 161, 166,
159, 165, 160,
157, 163, 158,
161, 165, 166,
158, 164, 159,
157, 96, 162,
90, 166, 171,
164, 170, 165,
163, 167, 168,
165, 171, 166,
164, 168, 169,
162, 96, 167,
90, 171, 176,
169, 175, 170,
167, 173, 168,
171, 175, 176,
168, 174, 169,
167, 96, 172,
174, 180, 175,
172, 178, 173,
175, 181, 176,
173, 179, 174,
172, 96, 177,
90, 176, 181,
178, 182, 183,
181, 185, 186,
178, 184, 179,
177, 96, 182,
90, 181, 186,
180, 184, 185,
186, 190, 191,
183, 189, 184,
182, 96, 187,
90, 186, 191,
184, 190, 185,
183, 187, 188,
190, 196, 191,
189, 193, 194,
187, 96, 192,
90, 191, 196,
189, 195, 190,
188, 192, 193,
195, 201, 196,
193, 199, 194,
192, 96, 197,
90, 196, 201,
195, 199, 200,
192, 198, 193,
201, 205, 206,
199, 203, 204,
197, 96, 202,
90, 201, 206,
199, 205, 200,
197, 203, 198,
204, 208, 209,
202, 96, 207,
90, 206, 211,
204, 210, 205,
202, 208, 203,
206, 210, 211,
207, 96, 212,
90, 211, 216,
209, 215, 210,
207, 213, 208,
211, 215, 216,
208, 214, 209,
90, 216, 221,
214, 220, 215,
213, 217, 218,
215, 221, 216,
214, 218, 219,
212, 96, 217,
90, 221, 226,
219, 225, 220,
217, 223, 218,
221, 225, 226,
218, 224, 219,
217, 96, 222,
90, 226, 231,
225, 229, 230,
223, 227, 228,
226, 230, 231,
223, 229, 224,
222, 96, 227,
229, 235, 230,
227, 233, 228,
230, 236, 231,
228, 234, 229,
227, 96, 232,
90, 231, 236,
232, 238, 233,
235, 240, 236,
232, 96, 237,
90, 236, 240,
240, 243, 244,
237, 96, 241,
90, 240, 244,
238, 241, 242,
243, 249, 244,
241, 96, 245,
90, 244, 249,
242, 245, 246,
250, 254, 99,
99, 254, 252,
253, 252, 254,
93, 253, 254,
251, 93, 254,
251, 254, 250,
243, 257, 258,
260, 238, 242,
257, 256, 261,
256, 259, 261,
260, 261, 259,
255, 261, 260,
258, 261, 255,
258, 257, 261,
243, 258, 248,
255, 260, 247,
234, 257, 235,
233, 259, 234,
263, 264, 271,
262, 269, 268,
267, 273, 266,
265, 272, 271,
262, 263, 270,
265, 266, 273,
267, 278, 273,
271, 272, 277,
269, 270, 275,
272, 273, 278,
270, 271, 276,
269, 274, 268,
267, 283, 278,
276, 277, 282,
274, 275, 280,
278, 283, 282,
275, 276, 281,
274, 279, 268,
282, 287, 286,
280, 285, 284,
282, 283, 288,
281, 286, 285,
279, 284, 268,
267, 288, 283,
284, 285, 290,
287, 288, 293,
285, 286, 291,
284, 289, 268,
267, 293, 288,
286, 287, 292,
293, 266, 265,
290, 291, 264,
289, 262, 268,
267, 266, 293,
291, 292, 265,
289, 290, 263,
295, 296, 303,
294, 301, 300,
299, 305, 298,
296, 297, 304,
295, 302, 301,
297, 298, 305,
299, 310, 305,
303, 304, 309,
301, 302, 307,
304, 305, 310,
302, 303, 308,
301, 306, 300,
299, 315, 310,
309, 314, 313,
306, 307, 312,
310, 315, 314,
307, 308, 313,
306, 311, 300,
313, 314, 319,
312, 317, 316,
314, 315, 320,
313, 318, 317,
311, 316, 300,
299, 320, 315,
316, 317, 322,
319, 320, 325,
317, 318, 323,
316, 321, 300,
299, 325, 320,
318, 319, 324,
325, 298, 297,
322, 323, 296,
321, 294, 300,
299, 298, 325,
323, 324, 297,
321, 322, 295,
334, 345, 327,
346, 347, 342,
341, 350, 340,
337, 353, 336,
336, 348, 335,
344, 339, 330,
337, 351, 352,
350, 351, 332,
331, 349, 350,
382, 383, 357,
357, 383, 384,
359, 384, 385,
361, 385, 386,
363, 386, 387,
355, 361, 363,
387, 388, 367,
388, 382, 355,
356, 366, 360,
373, 364, 366,
372, 362, 364,
371, 360, 362,
370, 358, 360,
356, 358, 370,
354, 356, 369,
366, 354, 368,
373, 374, 381,
372, 373, 380,
378, 371, 372,
377, 370, 371,
376, 369, 370,
368, 369, 376,
374, 368, 375,
380, 381, 388,
379, 380, 387,
385, 378, 379,
384, 377, 378,
383, 376, 377,
382, 375, 376,
381, 375, 382,
394, 399, 393,
451, 392, 398,
390, 396, 419,
393, 399, 398,
390, 451, 397,
396, 397, 403,
394, 405, 399,
397, 398, 404,
396, 402, 419,
399, 405, 404,
402, 403, 409,
394, 411, 405,
403, 404, 410,
402, 408, 419,
404, 405, 411,
408, 409, 415,
394, 417, 411,
409, 410, 416,
408, 414, 419,
411, 417, 416,
414, 415, 421,
394, 423, 417,
415, 416, 422,
414, 420, 419,
417, 423, 422,
420, 421, 427,
394, 429, 423,
421, 422, 428,
420, 426, 419,
422, 423, 429,
427, 433, 432,
394, 435, 429,
427, 428, 434,
426, 432, 419,
428, 429, 435,
432, 433, 439,
394, 441, 435,
433, 434, 440,
432, 438, 419,
434, 435, 441,
439, 445, 444,
394, 447, 441,
439, 440, 446,
438, 444, 419,
440, 441, 447,
445, 451, 390,
394, 393, 447,
445, 446, 392,
444, 390, 419,
446, 447, 393,
459, 453, 450,
461, 460, 450,
462, 461, 448,
463, 462, 442,
464, 463, 436,
448, 424, 436,
464, 430, 424,
465, 424, 453,
425, 452, 437,
425, 431, 401,
431, 437, 406,
437, 443, 407,
443, 449, 412,
452, 413, 412,
454, 418, 413,
425, 400, 418,
401, 457, 458,
406, 456, 457,
406, 407, 455,
407, 412, 389,
412, 413, 391,
418, 395, 391,
400, 458, 395,
457, 464, 465,
456, 463, 464,
456, 455, 462,
455, 389, 461,
389, 391, 460,
391, 395, 459,
458, 465, 459,
469, 468, 473,
472, 467, 507,
466, 486, 470,
473, 468, 467,
471, 507, 466,
471, 470, 474,
469, 473, 477,
476, 472, 471,
470, 486, 474,
477, 473, 472,
479, 475, 474,
469, 477, 481,
480, 476, 475,
474, 486, 478,
481, 477, 476,
483, 479, 478,
469, 481, 485,
484, 480, 479,
478, 486, 482,
481, 480, 484,
483, 482, 487,
469, 485, 490,
489, 484, 483,
482, 486, 487,
490, 485, 484,
492, 488, 487,
469, 490, 494,
493, 489, 488,
487, 486, 491,
490, 489, 493,
496, 492, 491,
469, 494, 498,
497, 493, 492,
491, 486, 495,
494, 493, 497,
500, 496, 495,
469, 498, 502,
501, 497, 496,
495, 486, 499,
502, 498, 497,
500, 499, 503,
469, 502, 506,
505, 501, 500,
499, 486, 503,
506, 502, 501,
504, 503, 466,
469, 506, 468,
467, 505, 504,
503, 486, 466,
468, 506, 505,
248, 94, 95,
93, 247, 253,
246, 92, 253,
94, 248, 251,
247, 93, 251,
245, 91, 92,
251, 250, 100,
98, 252, 253,
91, 97, 98,
94, 100, 101,
105, 100, 250,
250, 99, 104,
98, 97, 102,
101, 100, 105,
104, 99, 252,
252, 98, 103,
104, 109, 110,
102, 107, 108,
106, 105, 110,
104, 103, 108,
109, 114, 115,
107, 112, 113,
111, 110, 115,
109, 108, 113,
115, 114, 119,
112, 117, 118,
115, 120, 121,
113, 118, 119,
120, 119, 124,
118, 117, 122,
120, 125, 126,
118, 123, 124,
122, 127, 128,
125, 130, 131,
123, 128, 129,
125, 124, 129,
131, 130, 135,
129, 128, 133,
129, 134, 135,
127, 132, 133,
136, 135, 140,
133, 138, 139,
134, 139, 140,
132, 137, 138,
141, 140, 145,
138, 143, 144,
139, 144, 145,
138, 137, 142,
145, 150, 151,
143, 148, 149,
144, 149, 150,
143, 142, 147,
148, 153, 154,
150, 149, 154,
148, 147, 152,
150, 155, 156,
154, 159, 160,
153, 152, 157,
155, 160, 161,
154, 153, 158,
159, 164, 165,
157, 162, 163,
161, 160, 165,
158, 163, 164,
164, 169, 170,
163, 162, 167,
165, 170, 171,
164, 163, 168,
169, 174, 175,
167, 172, 173,
171, 170, 175,
168, 173, 174,
174, 179, 180,
172, 177, 178,
175, 180, 181,
173, 178, 179,
178, 177, 182,
181, 180, 185,
178, 183, 184,
180, 179, 184,
186, 185, 190,
183, 188, 189,
184, 189, 190,
183, 182, 187,
190, 195, 196,
189, 188, 193,
189, 194, 195,
188, 187, 192,
195, 200, 201,
193, 198, 199,
195, 194, 199,
192, 197, 198,
201, 200, 205,
199, 198, 203,
199, 204, 205,
197, 202, 203,
204, 203, 208,
204, 209, 210,
202, 207, 208,
206, 205, 210,
209, 214, 215,
207, 212, 213,
211, 210, 215,
208, 213, 214,
214, 219, 220,
213, 212, 217,
215, 220, 221,
214, 213, 218,
219, 224, 225,
217, 222, 223,
221, 220, 225,
218, 223, 224,
225, 224, 229,
223, 222, 227,
226, 225, 230,
223, 228, 229,
229, 234, 235,
227, 232, 233,
230, 235, 236,
228, 233, 234,
232, 237, 238,
235, 239, 240,
240, 239, 243,
238, 237, 241,
243, 248, 249,
242, 241, 245,
243, 239, 257,
260, 259, 238,
247, 248, 258,
258, 255, 247,
246, 247, 260,
260, 242, 246,
239, 235, 257,
234, 256, 257,
256, 234, 259,
233, 238, 259,
263, 271, 270,
265, 271, 264,
262, 270, 269,
265, 273, 272,
271, 277, 276,
269, 275, 274,
272, 278, 277,
270, 276, 275,
276, 282, 281,
274, 280, 279,
278, 282, 277,
275, 281, 280,
282, 286, 281,
280, 284, 279,
282, 288, 287,
281, 285, 280,
284, 290, 289,
287, 293, 292,
285, 291, 290,
286, 292, 291,
293, 265, 292,
290, 264, 263,
291, 265, 264,
289, 263, 262,
295, 303, 302,
296, 304, 303,
295, 301, 294,
297, 305, 304,
303, 309, 308,
301, 307, 306,
304, 310, 309,
302, 308, 307,
309, 313, 308,
306, 312, 311,
310, 314, 309,
307, 313, 312,
313, 319, 318,
312, 316, 311,
314, 320, 319,
313, 317, 312,
316, 322, 321,
319, 325, 324,
317, 323, 322,
318, 324, 323,
325, 297, 324,
322, 296, 295,
323, 297, 296,
321, 295, 294,
333, 335, 348,
348, 347, 326,
346, 345, 334,
344, 329, 328,
344, 328, 327,
347, 346, 326,
326, 333, 348,
344, 327, 345,
334, 326, 346,
341, 340, 345,
339, 344, 340,
344, 345, 340,
342, 341, 346,
348, 343, 347,
347, 343, 342,
341, 345, 346,
342, 343, 353,
353, 352, 342,
351, 350, 341,
349, 339, 340,
341, 342, 351,
349, 340, 350,
352, 351, 342,
337, 352, 353,
336, 353, 343,
343, 348, 336,
349, 330, 339,
329, 344, 330,
337, 338, 351,
338, 332, 351,
331, 350, 332,
331, 330, 349,
382, 357, 355,
357, 384, 359,
359, 385, 361,
361, 386, 363,
363, 387, 365,
359, 355, 357,
355, 365, 367,
365, 355, 363,
361, 355, 359,
387, 367, 365,
388, 355, 367,
366, 356, 354,
356, 360, 358,
360, 364, 362,
364, 360, 366,
373, 366, 374,
372, 364, 373,
371, 362, 372,
370, 360, 371,
356, 370, 369,
354, 369, 368,
366, 368, 374,
373, 381, 380,
372, 380, 379,
378, 372, 379,
377, 371, 378,
376, 370, 377,
368, 376, 375,
374, 375, 381,
380, 388, 387,
379, 387, 386,
385, 379, 386,
384, 378, 385,
383, 377, 384,
382, 376, 383,
381, 382, 388,
451, 398, 397,
393, 398, 392,
390, 397, 396,
396, 403, 402,
397, 404, 403,
399, 404, 398,
402, 409, 408,
403, 410, 409,
404, 411, 410,
408, 415, 414,
409, 416, 415,
411, 416, 410,
414, 421, 420,
415, 422, 421,
417, 422, 416,
420, 427, 426,
421, 428, 427,
422, 429, 428,
427, 432, 426,
427, 434, 433,
428, 435, 434,
432, 439, 438,
433, 440, 439,
434, 441, 440,
439, 444, 438,
439, 446, 445,
440, 447, 446,
445, 390, 444,
445, 392, 451,
446, 393, 392,
459, 450, 460,
461, 450, 448,
462, 448, 442,
463, 442, 436,
464, 436, 430,
453, 424, 450,
448, 436, 442,
436, 424, 430,
424, 448, 450,
464, 424, 465,
465, 453, 459,
452, 425, 454,
425, 437, 431,
437, 449, 443,
449, 437, 452,
425, 401, 400,
431, 406, 401,
437, 407, 406,
443, 412, 407,
452, 412, 449,
454, 413, 452,
425, 418, 454,
401, 458, 400,
406, 457, 401,
406, 455, 456,
407, 389, 455,
412, 391, 389,
418, 391, 413,
400, 395, 418,
457, 465, 458,
456, 464, 457,
456, 462, 463,
455, 461, 462,
389, 460, 461,
391, 459, 460,
458, 459, 395,
472, 507, 471,
473, 467, 472,
471, 466, 470,
471, 474, 475,
476, 471, 475,
477, 472, 476,
479, 474, 478,
480, 475, 479,
481, 476, 480,
483, 478, 482,
484, 479, 483,
481, 484, 485,
483, 487, 488,
489, 483, 488,
490, 484, 489,
492, 487, 491,
493, 488, 492,
490, 493, 494,
496, 491, 495,
497, 492, 496,
494, 497, 498,
500, 495, 499,
501, 496, 500,
502, 497, 501,
500, 503, 504,
505, 500, 504,
506, 501, 505,
504, 466, 507,
467, 504, 507,
468, 505, 467,
514, 522, 513,
521, 513, 522,
512, 520, 511,
511, 519, 510,
510, 524, 509,
529, 522, 523,
522, 529, 521,
529, 530, 521,
521, 530, 520,
519, 520, 531,
530, 531, 520,
519, 531, 524,
514, 528, 523,
518, 527, 528,
517, 526, 527,
532, 523, 528,
528, 527, 532,
532, 527, 533,
527, 526, 533,
515, 524, 525,
533, 526, 536,
525, 524, 536,
526, 525, 536,
525, 516, 515,
508, 529, 523,
534, 529, 508,
531, 534, 535,
531, 535, 524,
535, 536, 524,
534, 536, 535,
534, 532, 533,
523, 532, 508,
547, 539, 543,
514, 523, 522,
521, 512, 513,
512, 521, 520,
511, 520, 519,
510, 519, 524,
514, 518, 528,
518, 517, 527,
517, 516, 526,
515, 509, 524,
525, 526, 516,
534, 530, 529,
531, 530, 534,
534, 533, 536,
534, 508, 532,
539, 537, 538,
537, 551, 552,
551, 549, 550,
549, 547, 548,
547, 545, 546,
545, 543, 544,
543, 539, 542,
541, 539, 540,
539, 551, 537,
551, 547, 549,
547, 543, 545,
542, 539, 541,
539, 547, 551};
        mNormals = new float[mVertexes.length];
        mContext = context;

        LEFT_LEG_OFFSET = 45;
        RIGHT_LEG_OFFSET = 90;
        HEAD_OFFSET = 508;

        mIndex = new float[mVertexes.length];

        //setup index array
        for (int i = 0; i < mIndex.length; i++) {
            if (i < LEFT_LEG_OFFSET)
                mIndex[i] = 0;
            else if (i < RIGHT_LEG_OFFSET)
                mIndex[i] = 1;
            else if (i < HEAD_OFFSET)
                mIndex[i] = 2;
            else
                mIndex[i] = 3;
        }


        //setup colors
        mColors = new float[mVertexes.length*4/3];
        for (int i = 0; i < mColors.length; i++) {
            if (i < LEFT_LEG_OFFSET * 4)
                mColors[i] = 0f;
            else if (i < RIGHT_LEG_OFFSET * 4)
                mColors[i] = 0f;
            else if (i < HEAD_OFFSET * 4)
                mColors[i] = .5f;
            else
                mColors[i] = 1f;

            if (i%4 == 3)
                mColors[i] = 1f;
        }


        //setup textures
        mTextureCoords = new float[mVertexes.length*2/3];
        for (int i = 0; i < mTextureCoords.length; i+=2) {
            if (i >= HEAD_OFFSET*2) {
                mTextureCoords[i] = mShellTextureCoords[i-HEAD_OFFSET*2];
                mTextureCoords[i+1] = mShellTextureCoords[i+1-HEAD_OFFSET*2];
            } else {
                mTextureCoords[i] = 0f;
                mTextureCoords[i+1] = 0f;
            }
        }
        for (int i = 0; i < mTextureCoords.length; i++)
            Log.d(TAG, "Ladybug: " + mTextureCoords[i]);

        Log.d(TAG, "Ladybug: " + mTextureCoords[mTextureCoords.length-1]);

        //find normals as averages of the faces around
        //loop through each vertex
        for (int n = 0; n < mVertexes.length; n = n + 3) {
            int vertexNumber = n / 3;  //num of vertex from vertex 0
            //these will become the normals
            float x = 0;
            float y = 0;
            float z = 0;

            //go through DrawOrder and find all instances of that vertex
            for (int q = 0; q < mDrawOrder.length; q++) {
                if (vertexNumber == mDrawOrder[q]) {
                    //if a match is found get the vertex number to look up in mVertexes
                    int v1 = mDrawOrder[q - q % 3] * 3;
                    int v2 = mDrawOrder[q - q % 3 + 1] * 3;
                    int v3 = mDrawOrder[q - q % 3 + 2] * 3;
                    //get the x y and z of three triangle vertexes
                    float[] p1 = new float[]{mVertexes[v1], mVertexes[v1 + 1], mVertexes[v1 + 2]};
                    float[] p2 = new float[]{mVertexes[v2], mVertexes[v2 + 1], mVertexes[v2 + 2]};
                    float[] p3 = new float[]{mVertexes[v3], mVertexes[v3 + 1], mVertexes[v3 + 2]};
                    //prepare to calculate norm of each face using two lines from a point of the triangle
                    float[] U = new float[3];
                    float[] V = new float[3];
                    //get two vectors in relation to another point on the triangle
                    for (int r = 0; r < p1.length; r++) {
                        U[r] = p2[r] - p1[r];
                        V[r] = p3[r] - p1[r];
                    }
                    //find the norm of the face
                    x = x + U[1] * V[2] - U[2] * V[1];
                    y = y + U[2] * V[0] - U[0] * V[2];
                    z = z + U[0] * V[1] - U[1] * V[0];
                }
            }
            //normalize the norms
            float length = (float) Math.sqrt(x * x + y * y + z * z);
            mNormals[n] = x / length;
            mNormals[n + 1] = y / length;
            mNormals[n + 2] = z / length;
        }

        initializeBuffers();


    }



    private float[] solidColors(int length, float[] color) {
        float[] colors = new float[length];
        for (int i = 0; i < length; i++) {
            colors[i] = color[i%4];
        }
        return colors;
    }


    private void initializeBuffers() {



        // Initialize the buffers.
        ByteBuffer bPos = ByteBuffer.allocateDirect(mVertexes.length * 4);
        bPos.order(ByteOrder.nativeOrder());
        mPositionBuffer = bPos.asFloatBuffer();

        ByteBuffer bCoords = ByteBuffer.allocateDirect(mDrawOrder.length * 2);
        bCoords.order(ByteOrder.nativeOrder());
        mDrawOrderBuffer = bCoords.asShortBuffer();

        ByteBuffer bNormal = ByteBuffer.allocateDirect(mNormals.length * 4);
        bNormal.order(ByteOrder.nativeOrder());
        mNormalBuffer = bNormal.asFloatBuffer();

        ByteBuffer bColor = ByteBuffer.allocateDirect(mColors.length * 4);
        bColor.order(ByteOrder.nativeOrder());
        mColorBuffer = bColor.asFloatBuffer();

        ByteBuffer bTextureCoords = ByteBuffer.allocateDirect(mTextureCoords.length * 4);
        bTextureCoords.order(ByteOrder.nativeOrder());
        mTextureCoordsBuffer = bTextureCoords.asFloatBuffer();

        ByteBuffer bIndex = ByteBuffer.allocateDirect(mIndex.length * 4);
        bIndex.order(ByteOrder.nativeOrder());
        mIndexBuffer = bIndex.asFloatBuffer();

        mPositionBuffer.put(mVertexes).position(0);
        mNormalBuffer.put(mNormals).position(0);
        mColorBuffer.put(mColors).position(0);
        mDrawOrderBuffer.put(mDrawOrder).position(0);
        mTextureCoordsBuffer.put(mTextureCoords).position(0);
        mIndexBuffer.put(mIndex).position(0);
        mShellTextureDataHandle=loadTexture(mContext,R.drawable.ladyskin);



    }

    public static int loadTexture(final Context context, final int resourceID) {
        final int[] textureHandle = new int[1];

        GLES20.glGenTextures(1,textureHandle,0);
        if (textureHandle[0] != 0) {
            final BitmapFactory.Options options = new BitmapFactory.Options();
            options.inScaled = false;

            final Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), resourceID, options);

            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0]);

            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_NEAREST);

            GLUtils.texImage2D(GLES20.GL_TEXTURE_2D,0,bitmap,0);

            bitmap.recycle();
        }
        if (textureHandle[0] == 0) {
            throw new RuntimeException("Error loading texture");
        }
        return textureHandle[0];
    }

    public void render(int positionAttribute, int normalAttribute, int colorAttribute, int shelltextureAttribute, int indexAttribute,int shelltextureUniform, int[] boneMatrixID, boolean onlyPosition) {

        //initialize bone matrixes in shader

        GLES20.glUniformMatrix4fv(boneMatrixID[0],1,false,mLeftLegsBoneMatrix,0);
        GLES20.glUniformMatrix4fv(boneMatrixID[1],1,false,mRightLegsBoneMatrix,0);
        GLES20.glUniformMatrix4fv(boneMatrixID[2],1,false,mHeadBoneMatrix,0);
        GLES20.glUniformMatrix4fv(boneMatrixID[3],1,false,mShellBoneMatrix,0);


        // Pass in the position information
        mPositionBuffer.position(0);
        GLES20.glVertexAttribPointer(positionAttribute, 3, GLES20.GL_FLOAT, false,
                0, mPositionBuffer);
        GLES20.glEnableVertexAttribArray(positionAttribute);

        //Pass in index

        mIndexBuffer.position(0);
        GLES20.glVertexAttribPointer(indexAttribute, 1, GLES20.GL_FLOAT, false, 0, mIndexBuffer);
        GLES20.glEnableVertexAttribArray(indexAttribute);

        // Pass in the normal information
        mNormalBuffer.position(0);
        GLES20.glVertexAttribPointer(normalAttribute, 3, GLES20.GL_FLOAT, false,
                0, mNormalBuffer);
        GLES20.glEnableVertexAttribArray(normalAttribute);

        //Pass in the color information
        mColorBuffer.position(0);
        GLES20.glVertexAttribPointer(colorAttribute, 4, GLES20.GL_FLOAT, false,
                0, mColorBuffer);
        GLES20.glEnableVertexAttribArray(colorAttribute);


        //texture coords
        mTextureCoordsBuffer.position(0);
        GLES20.glVertexAttribPointer(shelltextureAttribute, 2, GLES20.GL_FLOAT, false, 0, mTextureCoordsBuffer);
        GLES20.glEnableVertexAttribArray(shelltextureAttribute);


        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mShellTextureDataHandle);
        GLES20.glUniform1i(shelltextureUniform, 0);

        // Draw the cube.
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, mDrawOrder.length, GLES20.GL_UNSIGNED_SHORT, mDrawOrderBuffer);

    }
}
